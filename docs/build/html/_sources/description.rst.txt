What's in here ?
################

Preprocessing
*************

The preprocessing can be separated in two main parts:

#. The general transformation of the VCF text files (often used in
   bioinformatics applications) to a format simpler to use in our projects with
   decoupled meta information files and sample files.
#. A more application specific part consisting for example in grouping all
   the information on each sample of a GWAS to train a model on genome wide
   information.

We chose to do these steps with homemade custom solutions although some tools
certainly already exist for a few reasons:

#. We had no good knowledge of these tools nor someone with a real expertise
   within easy reach. We had a try with GATK, bcf tools or PLINK and we still
   use them for some purpose but they are quite heavy to manipulate when your
   not used to it. Moreover, some features to keep the files shaped according
   to the standards classic standard were not necessary for our exploratory
   analysis and slow down the whole process.
#. We had little prior knowledge of the conventions in genomic data formating
   nor how it was structured. Thus, making the preprocessing ourselves could
   help us familiarize ourselves with this kind of dataset.

General transformations:
------------------------

Background
~~~~~~~~~~
The datasets we received consisted in 22 VCF files containing the genomic
information of all our samples for each human autosome (non-sexual chromosome).
::

   ##fileformat=VCFv4.1
   ##FILTER=<ID=PASS,Description="All filters passed">
   ##fileDate=20150218
   ##reference=ftp://ftp.1000genomes.ebi.ac.uk//vol1/ftp/technical/reference/phase2_reference_assembly_sequence/hs37d5.fa.gz
   ##source=1000GenomesPhase3Pipeline
   ##contig=<ID=1,assembly=b37,length=249250621>
   ##contig=<ID=2,assembly=b37,length=243199373>
   ...
   ...
   ##INFO=<ID=VT,Number=.,Type=String,Description="indicates what type of variant the line represents">
   ##INFO=<ID=EX_TARGET,Number=0,Type=Flag,Description="indicates whether a variant is within the exon pull down target boundaries">
   ##INFO=<ID=MULTI_ALLELIC,Number=0,Type=Flag,Description="indicates whether a site is multi-allelic">
   #CHROM  POS             ID              REF     ALT     QUAL    FILTER  INFO FORMAT  HG00096 HG00097
   22      16050075        rs587697622     A       G       100     PASS    .    GT      0/0     0/0
   22      16050115        rs587755077     G       A       100     PASS    .    GT      0/0     0/0
   22      16050213        rs587654921     C       T       100     PASS    .    GT      0/0     0/0

The VCF file format is a text format identifying the genetic variants between
individuals. They contain

| **deep-height**



| **deep-imputation**


.. image:: Figure_imputation.png

.. image:: Pipeline.png

*Part a*

.. code-block:: python

        import math
        # FIRST_ALLELE_BIT_POS
        FBP = int(math.pow(2, 28))  # --> 268435456
        # NUCLEOTIDE_LABELS
        NL = {
            "A": int(math.pow(2, 0)),  # --> 1
            "T": int(math.pow(2, 1)),  # --> 2
            "G": int(math.pow(2, 2)),  # --> 4
            "C": int(math.pow(2, 4))}  # --> 8

        # SNPS_VALUES_ENCODED --> A-C 1st allele and then A-C 2nd allele
        SVE = [
            NL["A"] * FBP,  # --> 268435456
            NL["T"] * FBP,  # --> 536870912
            NL["G"] * FBP,  # --> 1073741824
            NL["C"] * FBP,  # --> 4294967296
            (NL["A"]) * FBP * int(math.pow(2, 5)),  # --> 8589934592
            (NL["T"]) * FBP * int(math.pow(2, 5)),  # --> 17179869184
            (NL["G"]) * FBP * int(math.pow(2, 5)),  # --> 34359738368
            (NL["C"]) * FBP * int(math.pow(2, 5))]  # --> 137438953472


.. code-block:: python

        # First allele encoding
        dataframe.loc[((dataframe.REF == "A") & (dataframe.loc[:, liste_names[i]].str[0] == "0")), "output" + liste_names[i]] = sve[0]
        ...
        ...
        dataframe.loc[((dataframe.ALT == "C") & (dataframe.loc[:, liste_names[i]].str[0] == "1")), "output" + liste_names[i]] = sve[3]

        # Second allele encoding
        dataframe.loc[((dataframe.REF == "A") & (dataframe.loc[:, liste_names[i]].str[-1] == "0")), "output" + liste_names[i]] += sve[4]
        ...
        ...
        dataframe.loc[((dataframe.ALT == "C") & (dataframe.loc[:, liste_names[i]].str[-1] == "1")), "output" + liste_names[i]] += sve[7]

        # Add position
        dataframe.loc[:, "output" + liste_names[i]] += dataframe.POS

BUILD 37 http://www.internationalgenome.org/category/ncbi36/

What do we actually do
~~~~~~~~~~~~~~~~~~~~~~


Application specific transformations:
-------------------------------------

Idea
Workflow
